# -*- coding: utf-8 -*-
"""Restaurant Rating

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/16rXsijEw4CnfMa_h8ragAqmzqPQ7QBbp

**IMPORT THE LIBRARIES**
"""

import pandas as pd
import numpy as np

"""**LOAD THE DATASET**"""

#load the CSV file
df=pd.read_csv("/content/Dataset.csv")

#df
df

#head
df.head()

#tail
df.tail()

#info
df.info()

#describe
df.describe()

#shape
df.shape

#columns
df.columns

#null values
df.isnull()

#total null values
df.isnull().sum()

#df.isnull().sum().sum()
df.isnull().sum().sum()

"""**DATA VISUALIZATION**"""

import matplotlib.pyplot as plt
import seaborn as sns

df.drop('Switch to order menu',axis=1)

sns.heatmap(df.corr(),annot=True)

df.plot()

plt.scatter(df["Aggregate rating"], df["Price range"])

plt.hist(df["Price range"],color='purple')

"""**ENCODING THE CATEGORICAL VALUES**"""

from sklearn.preprocessing import LabelEncoder
categorical_columns = ['Restaurant Name', 'City', 'Address', 'Locality', 'Locality Verbose',
                       'Cuisines', 'Currency', 'Has Table booking', 'Has Online delivery',
                        'Is delivering now_1','Switch to order menu', 'Rating color', 'Rating text']


label_encoder = LabelEncoder()

for column in categorical_columns:
  df[column]=label_encoder.fit_transform(df[column])

df.head()

"""**BUILDING REGRESSION MODEL**"""

# Select features and target variable
X = df.drop(['Aggregate rating', 'City', 'Longitude', 'Latitude', 'Switch to order menu', 'Is delivering now_1'], axis=1)
y = df['Aggregate rating']

print(X.shape)

print(y.shape)

#train_test_split
from sklearn.model_selection import train_test_split

x=df.drop(['Aggregate rating','City','Longitude','Latitude','Is delivering now_1'],axis=1)
y=df['Aggregate rating']

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(x,y,random_state=42,test_size=0.2)

"""**1.Linear Regression**"""

from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score

model_lr=LinearRegression()

model_lr.fit(x_train, y_train)

y_pred = model_lr.predict(x_test)

mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"MSE Linear Regression: {mse:.4f}")

print(f"R-squared Linear Regression: {r2:.4f}")

"""**2.DecisionTreeRegressor**"""

from sklearn.tree import DecisionTreeRegressor
from sklearn.metrics import mean_squared_error, r2_score

model_DR=DecisionTreeRegressor()

model_DR.fit(x_train, y_train)

y_pred_DR = model_DR.predict(x_test)

mse_DR = mean_squared_error(y_test, y_pred_DR)
r2_Dr = r2_score(y_test, y_pred_DR)

print(f"MSE Decision Tree Regressor: {mse_DR:.4f}")

print(f"R-squared Decision Tree Regressor: {r2_Dr:.4f}")

"""**3.RandomForestRegressor**"""

from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_squared_error, r2_score

model_Rf=RandomForestRegressor()

model_Rf.fit(x_train, y_train)

y_pred_Rf = model_Rf.predict(x_test)

mse_Rf = mean_squared_error(y_test, y_pred_Rf)
r2_Rf = r2_score(y_test, y_pred_Rf)

print(f"MSE Random Forest Regressor: {mse_Rf:.4f}")

print(f"R-squared Random Forest Regressor: {r2_Rf:.4f}")